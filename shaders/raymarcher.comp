#version 450

layout (binding = 0) uniform UniformBufferObject {
    vec3 position;
    vec3 viewDirection;
    float FOV;
} ubo;

layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

struct GPUOctreeNode {
    uint data;
};

struct ReturnedOctreeNode {
    int minX, maxX, minY, maxY, minZ, maxZ;
    vec4 color;
};

struct Octree {
    GPUOctreeNode baseNode;
    GPUOctreeNode nodes[37449];//37449
    ivec3 position;
};

layout(std430, binding = 2) readonly buffer TEMP{
    Octree octrees[8];
} octreeGrid;

layout (local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

struct Ray {
    vec3 origin;
    vec3 direction;
};

const uint CHILDREN_INDEX_MASK  =           0x0000FFFF;//0b00000000000000001111111111111111;
const uint CHILDREN_NON_EMPTY_MASK_MASK =   0x00FF0000;//0b00000000111111110000000000000000;
const uint CHILDREN_HOMOGENEOUS_MASK_MASK = 0xFF000000;//0b11111111000000000000000000000000;
const uint CHILDREN_NON_EMPTY_MASK_MASKS[8] = {
                                            0x00010000,//0b00000000000000010000000000000000,
                                            0x00020000,//0b00000000000000100000000000000000,
                                            0x00040000,//0b00000000000001000000000000000000,
                                            0x00080000,//0b00000000000010000000000000000000,
                                            0x00100000,//0b00000000000100000000000000000000,
                                            0x00200000,//0b00000000001000000000000000000000,
                                            0x00400000,//0b00000000010000000000000000000000,
                                            0x00800000,//0b00000000100000000000000000000000,
};
const uint CHILDREN_HOMOGENEOUS_MASK_MASKS[8] = {
                                            0x01000000,//0b00000001000000000000000000000000,
                                            0x02000000,//0b00000010000000000000000000000000,
                                            0x04000000,//0b00000100000000000000000000000000,
                                            0x08000000,//0b00001000000000000000000000000000,
                                            0x10000000,//0b00010000000000000000000000000000,
                                            0x20000000,//0b00100000000000000000000000000000,
                                            0x40000000,//0b01000000000000000000000000000000,
                                            0x80000000,//0b10000000000000000000000000000000,
};

const uint COLOR_RED_MASK       =   0x000000FF;//0b00000000000000000000000011111111;
const uint COLOR_GREEN_MASK     =   0x0000FF00;//0b00000000000000001111111100000000;
const uint COLOR_BLUE_MASK      =   0x00FF0000;//0b00000000111111110000000000000000;
const uint COLOR_ALPHA_MASK     =   0xFF000000;//0b11111111000000000000000000000000;



uint getChildrenIndex(in GPUOctreeNode node) {
    return node.data & CHILDREN_INDEX_MASK;
}

uint getChildrenNonEmptyMask(in GPUOctreeNode node) {
    return node.data & CHILDREN_NON_EMPTY_MASK_MASK;
}

uint getChildrenHomogeneousMask(in GPUOctreeNode node) {
    return node.data & CHILDREN_HOMOGENEOUS_MASK_MASK;
}

vec4 getColor(in GPUOctreeNode node) {
    return vec4((node.data & COLOR_RED_MASK) / 255.0f, ((node.data & COLOR_GREEN_MASK) >> 8) / 255.0f, ((node.data & COLOR_BLUE_MASK) >> 16) / 255.0f, ((node.data & COLOR_ALPHA_MASK) >> 24) / 255.0f);
}

const vec3 tempColors[8] = {
    vec3(0.0f, 0.0f, 0.0f),
    vec3(1.0f, 0.0f, 0.0f),
    vec3(0.0f, 1.0f, 0.0f),
    vec3(1.0f, 1.0f, 0.0f),
    vec3(0.0f, 0.0f, 1.0f),
    vec3(1.0f, 0.0f, 1.0f),
    vec3(0.0f, 1.0f, 1.0f),
    vec3(1.0f, 1.0f, 1.0f),
};

const int CHUNK_SIZE = 32;
const ivec3 WORLD_CHUNK_SIZES = ivec3(2);
const ivec3 WORLD_DIMENSIONS = WORLD_CHUNK_SIZES*CHUNK_SIZE;
ReturnedOctreeNode emptyNode = ReturnedOctreeNode(0, 0, 0, 0, 0, 0, vec4(0.0f));
ReturnedOctreeNode getLowestOctreeNode(in vec3 position) {
    if (position.x < 0 || position.x >= WORLD_DIMENSIONS.x || position.y < 0 || position.y >= WORLD_DIMENSIONS.y || position.z < 0 || position.z >= WORLD_DIMENSIONS.z)
        return emptyNode;

    int chunkIndex = int(floor(position.x/CHUNK_SIZE) + floor(position.y/CHUNK_SIZE)*WORLD_CHUNK_SIZES.x + floor(position.z/CHUNK_SIZE)*WORLD_CHUNK_SIZES.x*WORLD_CHUNK_SIZES.y);
    
    GPUOctreeNode node = octreeGrid.octrees[chunkIndex].baseNode;

    ivec3 octreePosition = octreeGrid.octrees[chunkIndex].position;
    position -= octreePosition;

    float halfSize = CHUNK_SIZE/2.0f;
    int minX = 0, minY = 0, minZ = 0;
    while (halfSize*2 > 1) {
        vec3 difference = vec3((position.x-minX)/halfSize, (position.y-minY)/halfSize, (position.z-minZ)/halfSize);
        int index = int(floor(difference.x) + floor(difference.y)*2 + floor(difference.z)*4);
        
        minX += int(floor(difference.x)*halfSize);
        minY += int(floor(difference.y)*halfSize);
        minZ += int(floor(difference.z)*halfSize);
        halfSize /= 2.0f;

        //return ReturnedOctreeNode(minX, minX+int(halfSize*2.0f), minY, minY+int(halfSize*2.0f), minZ, minZ+int(halfSize*2.0f), vec4(tempColors[index], 1.0f));

        bool isNonEmpty = bool(getChildrenNonEmptyMask(node) & CHILDREN_NON_EMPTY_MASK_MASKS[index]);
        if (!isNonEmpty) {
            return ReturnedOctreeNode(
                octreePosition.x+minX, octreePosition.x+minX+int(halfSize*2.0f), 
                octreePosition.y+minY, octreePosition.y+minY+int(halfSize*2.0f), 
                octreePosition.z+minZ, octreePosition.z+minZ+int(halfSize*2.0f), 
                vec4(0.0f));
        }

        //return ReturnedOctreeNode(minX, minX+int(halfSize*2.0f), minY, minY+int(halfSize*2.0f), minZ, minZ+int(halfSize*2.0f), vec4(position.x/WORLD_SIZE, position.y/WORLD_SIZE, position.z/WORLD_SIZE, 1.0f));

        bool isHomogenous = (getChildrenHomogeneousMask(node) & CHILDREN_HOMOGENEOUS_MASK_MASKS[index]) != 0;
        if (isHomogenous) {
            //return ReturnedOctreeNode(minX, minX+int(halfSize*2.0f), minY, minY+int(halfSize*2.0f), minZ, minZ+int(halfSize*2.0f), vec4((getChildrenHomogeneousMask(node) | CHILDREN_HOMOGENEOUS_MASK_MASKS[index] >> 24)/255.0f, (getChildrenHomogeneousMask(node) | CHILDREN_HOMOGENEOUS_MASK_MASKS[index] >> 24)/255.0f, (getChildrenHomogeneousMask(node) | CHILDREN_HOMOGENEOUS_MASK_MASKS[index] >> 24)/255.0f, 1.0f));
            return ReturnedOctreeNode(
                octreePosition.x+minX, octreePosition.x+minX+int(halfSize*2.0f), 
                octreePosition.y+minY, octreePosition.y+minY+int(halfSize*2.0f), 
                octreePosition.z+minZ, octreePosition.z+minZ+int(halfSize*2.0f), 
                getColor(octreeGrid.octrees[chunkIndex].nodes[getChildrenIndex(node)+index]));
        }

        //return ReturnedOctreeNode(minX, minX+int(halfSize*2.0f), minY, minY+int(halfSize*2.0f), minZ, minZ+int(halfSize*2.0f), vec4(position.x/WORLD_SIZE, position.y/WORLD_SIZE, position.z/WORLD_SIZE, 1.0f));

        node = octreeGrid.octrees[chunkIndex].nodes[getChildrenIndex(node)+index];
    }

    return ReturnedOctreeNode(
        octreePosition.x+minX, octreePosition.x+minX+int(halfSize*2.0f), 
        octreePosition.y+minY, octreePosition.y+minY+int(halfSize*2.0f), 
        octreePosition.z+minZ, octreePosition.z+minZ+int(halfSize*2.0f), 
        vec4(1.0f, 0.0f, 0.0f, 1.0f));
    //ReturnedOctreeNode(minX, minX+int(halfSize*2.0f), minY, minY+int(halfSize*2.0f), minZ, minZ+int(halfSize*2.0f), getColor(node));
    
}

int MAX_STEPS = 1000;
float MAX_DISTANCE = 100.0f;
vec3 marchRay(in Ray ray) {
    vec3 returnColor = vec3(0.0f);
    float opacityUsed = 0.0f;
    vec3 position = ray.origin;
    vec3 direction = ray.direction;
    float totalDistance = 0.0f;

    int MAX_STEPS = 1000, i = 0;
    while (i++ < MAX_STEPS && totalDistance < MAX_DISTANCE && opacityUsed < 1.0f) {
        if (position.z <= 0) {
            if (int(floor(position.x-direction.x*position.z/direction.z) + floor(position.y-direction.y*position.z/direction.z)) % 2 == 0) {
                returnColor += vec3(1.0f)*(1.0f-opacityUsed);
                break;
            } else {
                returnColor += vec3(0.0f)*(1.0f-opacityUsed);
                break;
            }
        }

        ReturnedOctreeNode lowestNode = getLowestOctreeNode(position);

        if (lowestNode.color.a > 0.0f) {
            returnColor += lowestNode.color.rgb*(1.0f-opacityUsed)*lowestNode.color.a;
            opacityUsed += lowestNode.color.a*(1.0f-opacityUsed)*1.1;
        }

        int size = lowestNode.maxX-lowestNode.minX;
        float lowestDistance = 100.0f;
        if (position.x < 0 || position.x >= WORLD_DIMENSIONS.x || position.y < 0 || position.y >= WORLD_DIMENSIONS.y || position.z < 0 || position.z >= WORLD_DIMENSIONS.z) {
            lowestDistance = 1.0f;   
        }
        else {
            if (direction.x > 0) {
                lowestDistance = (size - (position.x - lowestNode.minX)) / abs(direction.x);
            } else if (direction.x < 0) {
                lowestDistance = (size - (lowestNode.maxX - position.x)) / abs(direction.x);
            }
            if (direction.y > 0) {
                lowestDistance = min(lowestDistance, (size - (position.y - lowestNode.minY)) / abs(direction.y));
            } else if (direction.y < 0) {
                lowestDistance = min(lowestDistance, (size - (lowestNode.maxY - position.y)) / abs(direction.y));
            }
            if (direction.z > 0) {
                lowestDistance = min(lowestDistance, (size - (position.z - lowestNode.minZ)) / abs(direction.z));
            } else if (direction.z < 0) {
                lowestDistance = min(lowestDistance, (size - (lowestNode.maxZ - position.z)) / abs(direction.z));
            }
        }
        lowestDistance = lowestDistance+0.001f;
        position += direction*lowestDistance;
        totalDistance += lowestDistance;
    }

    return returnColor;
}

float CANVAS_DISTANCE = 1;
vec3 WORLD_UP = vec3(0.0f, 0.0f, 1.0f);
Ray createRay() {
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(imageSize(outputImage))*2-1;
	vec3 uvRight = normalize(cross(ubo.viewDirection, WORLD_UP));
	vec3 uvDown = normalize(cross(ubo.viewDirection, uvRight));
	vec3 toCanvas = ubo.viewDirection * CANVAS_DISTANCE;
	vec2 canvasSize = imageSize(outputImage);
	vec3 rayPosition = ubo.position + toCanvas + (uvRight * uv.x) + (uvDown * uv.y);
	vec3 rayDirection = normalize(rayPosition - ubo.position);

    return Ray(rayPosition, rayDirection);
}

void main() {
    Ray ray = createRay();

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(marchRay(ray), 1.0f));
    //imageStore(outputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4((gl_GlobalInvocationID.x/16)/15.0f, (gl_GlobalInvocationID.y/16)/15.0f, (gl_GlobalInvocationID.x % 16)/15.0f, 1.0f));
}
