#version 450
//#extension GL_ARB_separate_shader_objects : disable

layout (binding = 0) uniform UniformBufferObject {
    vec3 position;
    vec3 viewDirection;
    float FOVScaling;
    float aspectRatio;
} ubo;

layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

struct GPUOctreeNode {
    uint data;
};

struct ReturnedOctreeNode {
    int minX, maxX, minY, maxY, minZ, maxZ;
    vec4 color;
};

layout(std430, binding = 2) readonly buffer Octree {
    GPUOctreeNode baseNode;
    GPUOctreeNode nodes[37449];//37449
    ivec3 position;
} octreeGrid[8000];

layout (local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

struct Ray {
    vec3 origin;
    vec3 direction;
};

const uint CHILDREN_INDEX_MASK  =           0x0000FFFF;//0b00000000000000001111111111111111;
const uint CHILDREN_NON_EMPTY_MASK_MASK =   0x00FF0000;//0b00000000111111110000000000000000;
const uint CHILDREN_HOMOGENEITY_MASK_MASK = 0xFF000000;//0b11111111000000000000000000000000;
const uint CHILDREN_NON_EMPTY_MASK_MASKS[8] = {
                                            0x00010000,//0b00000000000000010000000000000000,
                                            0x00020000,//0b00000000000000100000000000000000,
                                            0x00040000,//0b00000000000001000000000000000000,
                                            0x00080000,//0b00000000000010000000000000000000,
                                            0x00100000,//0b00000000000100000000000000000000,
                                            0x00200000,//0b00000000001000000000000000000000,
                                            0x00400000,//0b00000000010000000000000000000000,
                                            0x00800000,//0b00000000100000000000000000000000,
};
const uint CHILDREN_HOMOGENEITY_MASK_MASKS[8] = {
                                            0x01000000,//0b00000001000000000000000000000000,
                                            0x02000000,//0b00000010000000000000000000000000,
                                            0x04000000,//0b00000100000000000000000000000000,
                                            0x08000000,//0b00001000000000000000000000000000,
                                            0x10000000,//0b00010000000000000000000000000000,
                                            0x20000000,//0b00100000000000000000000000000000,
                                            0x40000000,//0b01000000000000000000000000000000,
                                            0x80000000,//0b10000000000000000000000000000000,
};

const uint COLOR_RED_MASK       =   0x000000FF;//0b00000000000000000000000011111111;
const uint COLOR_GREEN_MASK     =   0x0000FF00;//0b00000000000000001111111100000000;
const uint COLOR_BLUE_MASK      =   0x00FF0000;//0b00000000111111110000000000000000;
const uint COLOR_ALPHA_MASK     =   0xFF000000;//0b11111111000000000000000000000000;



uint getChildrenIndex(in GPUOctreeNode node) {
    return (node.data & CHILDREN_INDEX_MASK);
}

uint getChildrenNonEmptyMask(in GPUOctreeNode node) {
    return node.data & CHILDREN_NON_EMPTY_MASK_MASK;
}

uint getChildrenHomogeneityMask(in GPUOctreeNode node) {
    return node.data & CHILDREN_HOMOGENEITY_MASK_MASK;
}

vec4 getColor(in GPUOctreeNode node) {
    return vec4((node.data & COLOR_RED_MASK) / 255.0f, ((node.data & COLOR_GREEN_MASK) >> 8) / 255.0f, ((node.data & COLOR_BLUE_MASK) >> 16) / 255.0f, ((node.data & COLOR_ALPHA_MASK) >> 24) / 255.0f);
}

// struct ChildrenIndexStack {
//     int stack[6] = {0, -1, -1, -1, -1, -1};
    
//     void resetPastIndex(in int index) {
//         for (int i = index; i < 6; i++)
//             stack[i] = -1;
//     }
// } ChildrenIndexStack;

// const vec3 tempColors[8] = {
//     vec3(0.0f, 0.0f, 0.0f),
//     vec3(1.0f, 0.0f, 0.0f),
//     vec3(0.0f, 1.0f, 0.0f),
//     vec3(1.0f, 1.0f, 0.0f),
//     vec3(0.0f, 0.0f, 1.0f),
//     vec3(1.0f, 0.0f, 1.0f),
//     vec3(0.0f, 1.0f, 1.0f),
//     vec3(1.0f, 1.0f, 1.0f),
// };

const int CHUNK_SIZE = 32;
const ivec3 WORLD_CHUNK_SIZES = ivec3(20, 20, 20);
const ivec3 WORLD_DIMENSIONS = WORLD_CHUNK_SIZES*CHUNK_SIZE;
ReturnedOctreeNode emptyNode = ReturnedOctreeNode(0, 0, 0, 0, 0, 0, vec4(0.0f));
ReturnedOctreeNode getLowestOctreeNode(in vec3 position) {
    if (position.x < 0 || position.x >= WORLD_DIMENSIONS.x || position.y < 0 || position.y >= WORLD_DIMENSIONS.y || position.z < 0 || position.z >= WORLD_DIMENSIONS.z)
        return emptyNode;

    int chunkIndex = int(floor(position.x/CHUNK_SIZE) + floor(position.y/CHUNK_SIZE)*WORLD_CHUNK_SIZES.x + floor(position.z/CHUNK_SIZE)*WORLD_CHUNK_SIZES.x*WORLD_CHUNK_SIZES.y);
    
    GPUOctreeNode node = octreeGrid[chunkIndex].baseNode;
    ivec3 octreePosition = octreeGrid[chunkIndex].position;
    if (node.data == 0)
        return ReturnedOctreeNode(
            octreePosition.x, octreePosition.x+CHUNK_SIZE, 
            octreePosition.y, octreePosition.y+CHUNK_SIZE,
            octreePosition.z, octreePosition.z+CHUNK_SIZE,
            vec4(0.0f));

    position -= octreePosition;

    float halfSize = CHUNK_SIZE/2.0f;
    int minX = 0, minY = 0, minZ = 0;
    while (halfSize*2 > 1) {
        vec3 difference = vec3((position.x-minX)/halfSize, (position.y-minY)/halfSize, (position.z-minZ)/halfSize);
        int index = int(floor(difference.x) + floor(difference.y)*2 + floor(difference.z)*4);
        
        minX += int(floor(difference.x)*halfSize);
        minY += int(floor(difference.y)*halfSize);
        minZ += int(floor(difference.z)*halfSize);
        halfSize /= 2.0f;

        bool isNonEmpty = bool(getChildrenNonEmptyMask(node) & CHILDREN_NON_EMPTY_MASK_MASKS[index]);
        if (!isNonEmpty) {
            return ReturnedOctreeNode(
                octreePosition.x+minX, octreePosition.x+minX+int(halfSize*2.0f), 
                octreePosition.y+minY, octreePosition.y+minY+int(halfSize*2.0f), 
                octreePosition.z+minZ, octreePosition.z+minZ+int(halfSize*2.0f), 
                vec4(0.0f));
        }

        bool isHomogenous = (getChildrenHomogeneityMask(node) & CHILDREN_HOMOGENEITY_MASK_MASKS[index]) != 0;
        if (isHomogenous) {
            return ReturnedOctreeNode(
                octreePosition.x+minX, octreePosition.x+minX+int(halfSize*2.0f), 
                octreePosition.y+minY, octreePosition.y+minY+int(halfSize*2.0f), 
                octreePosition.z+minZ, octreePosition.z+minZ+int(halfSize*2.0f), 
                getColor(octreeGrid[chunkIndex].nodes[getChildrenIndex(node)+index]));
        }

        node = octreeGrid[chunkIndex].nodes[getChildrenIndex(node)+index];
    }

    return ReturnedOctreeNode(
        octreePosition.x+minX, octreePosition.x+minX+int(halfSize*2.0f), 
        octreePosition.y+minY, octreePosition.y+minY+int(halfSize*2.0f), 
        octreePosition.z+minZ, octreePosition.z+minZ+int(halfSize*2.0f), 
        vec4(1.0f, 0.0f, 0.0f, 1.0f));
}

float MAX_DISTANCE = 10000.0f;
float getDistanceToEnterWorld(in vec3 position, in vec3 direction) {
    float distance = MAX_DISTANCE;

    vec3 rayOrigin = position;
    vec3 rayDirection = normalize(direction);

    //Calculate the intersection point with the world boundaries
    vec3 tMin = -rayOrigin / rayDirection;
    vec3 tMax = (vec3(WORLD_DIMENSIONS) - rayOrigin) / rayDirection;

    //Find the minimum and maximum t values
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    //Find the maximum of the minimum t values
    float tNear = max(max(t1.x, t1.y), t1.z);

    //Check if the ray intersects the world
    if (tNear >= 0.0 && tNear < distance) {
        distance = tNear;
    }

    return distance;
}

vec2 floorColors = vec2(0.7f, 0.0f), floorAbsorbedFactors = vec2(0.7f, 1.0f);
float minAbsorbtion = 0.5f;
float TEMP_ABSORBTION = 1.0;
int MAX_STEPS = 1000;
vec4 previousColor = vec4(0.0f);
const vec3 skyColor = vec3(0x87/255.0f, 0xCE/255.0f, 0xEB/255.0f);
vec3 marchRay(in Ray ray) {
    vec3 returnColor = vec3(0.0f);
    float opacityUsed = 0.0f;
    vec3 position = ray.origin;
    vec3 direction = ray.direction;
    float totalDistance = 0.0f;

    if (direction.x == 0.0f)
        direction.x = 0.0001f;
    if (direction.y == 0.0f)
        direction.y = 0.0001f;
    if (direction.z == 0.0f)
        direction.z = 0.0001f;

    vec3 differenceFromPrevious = vec3(0.0f);

    int stepCount = 0;
    while (stepCount++ < MAX_STEPS && totalDistance < MAX_DISTANCE && opacityUsed < 1.0f) {
        if (position.z <= 0) {
            totalDistance -= position.z/direction.z;
            position = position-direction*position.z/direction.z;
            //floor(position.y-direction.y*position.z/direction.z))

            vec2 difference = (WORLD_DIMENSIONS/2.0f-position).xy;
            //Rings
            //float distance = sqrt(difference.x*difference.x+difference.y*difference.y);
            // if (int(pow(distance, 0.4f)) % 2 == 0) {
            //     returnColor += vec3(floorColors.x)*(1.0f-opacityUsed)*floorAbsorbedFactors.x;
            //     opacityUsed += floorAbsorbedFactors.x*(1.0f-opacityUsed);
            //     if (opacityUsed >= 1.0f)
            //         break;
            //     direction = reflect(direction, vec3(0.0f, 0.0f, 1.0f));
            // } else {
            //     returnColor += vec3(floorColors.y)*(1.0f-opacityUsed)*floorAbsorbedFactors.y;
            //     opacityUsed += floorAbsorbedFactors.y*(1.0f-opacityUsed);
            //     if (opacityUsed >= 1.0f)
            //         break;
            //     direction = reflect(direction, vec3(0.0f, 0.0f, 1.0f));
            // }
            //Checkerboard
            if (int(floor(difference.x/64)+floor(difference.y/64)) % 2 == 0) {
                returnColor += vec3(floorColors.x)*(1.0f-opacityUsed)*floorAbsorbedFactors.x;
                opacityUsed += floorAbsorbedFactors.x*(1.0f-opacityUsed);
                if (opacityUsed >= 1.0f)
                    break;
                direction = reflect(direction, vec3(0.0f, 0.0f, 1.0f));
            } else {
                returnColor += vec3(floorColors.y)*(1.0f-opacityUsed)*floorAbsorbedFactors.y;
                opacityUsed += floorAbsorbedFactors.y*(1.0f-opacityUsed);
                if (opacityUsed >= 1.0f)
                    break;
                direction = reflect(direction, vec3(0.0f, 0.0f, 1.0f));
            }
        }

        ReturnedOctreeNode lowestNode = getLowestOctreeNode(position);

        if (lowestNode.color.a > 0.0f && previousColor != lowestNode.color.rgba) {
            returnColor += lowestNode.color.rgb*(1.0f-opacityUsed)*lowestNode.color.a;
            opacityUsed += lowestNode.color.a*(1.0f-opacityUsed);
            
            if (opacityUsed >= 0.95f)
                break;
        }

        int size = lowestNode.maxX-lowestNode.minX;
        float lowestDistance = MAX_DISTANCE-totalDistance;
        if (position.x < 0 || position.x >= WORLD_DIMENSIONS.x || position.y < 0 || position.y >= WORLD_DIMENSIONS.y || position.z < 0 || position.z >= WORLD_DIMENSIONS.z) {
            differenceFromPrevious = vec3(0.0f);

            lowestDistance = min(lowestDistance, getDistanceToEnterWorld(position, direction));

            if (direction.z < 0)
                lowestDistance = min(lowestDistance, abs(position.z / direction.z));
        }
        else {
            if (direction.x > 0) {
                lowestDistance = (size - (position.x - lowestNode.minX)) / abs(direction.x);
                differenceFromPrevious = vec3(1.0f, 0.0f, 0.0f);
            } else if (direction.x < 0) {
                lowestDistance = (size - (lowestNode.maxX - position.x)) / abs(direction.x);
                differenceFromPrevious = vec3(-1.0f, 0.0f, 0.0f);
            }
            if (direction.y > 0) {
                if ((size - (position.y - lowestNode.minY)) / abs(direction.y) < lowestDistance) {
                    lowestDistance = (size - (position.y - lowestNode.minY)) / abs(direction.y);
                    differenceFromPrevious = vec3(0.0f, 1.0f, 0.0f);
                }
            } else if (direction.y < 0) {
                if ((size - (lowestNode.maxY - position.y)) / abs(direction.y) < lowestDistance) {
                    lowestDistance = (size - (lowestNode.maxY - position.y)) / abs(direction.y);
                    differenceFromPrevious = vec3(0.0f, -1.0f, 0.0f);
                }
            }
            if (direction.z > 0) {
                if ((size - (position.z - lowestNode.minZ)) / abs(direction.z) < lowestDistance) {
                    lowestDistance = (size - (position.z - lowestNode.minZ)) / abs(direction.z);
                    differenceFromPrevious = vec3(0.0f, 0.0f, 1.0f);
                }
            } else if (direction.z < 0) {
                if ((size - (lowestNode.maxZ - position.z)) / abs(direction.z) < lowestDistance) {
                    lowestDistance = (size - (lowestNode.maxZ - position.z)) / abs(direction.z);
                    differenceFromPrevious = vec3(0.0f, 0.0f, -1.0f);
                }
            }
        }
        lowestDistance = max(lowestDistance*1.001f, 0.01f);
        //lowestDistance = 0.01f;
        position += direction*lowestDistance;
        totalDistance += lowestDistance;
        previousColor = lowestNode.color.rgba;
    }
    returnColor += skyColor*(1.0f-opacityUsed);

    if (direction.x == 0.0f || direction.y == 0.0f || direction.z == 0.0f)
        return vec3(1.0f, 0.0f, 0.0f);

    float brightness = max(dot(differenceFromPrevious, normalize(vec3(-0.5f, -0.7f, -1.0f))), 0.2f);
    return returnColor*brightness;//*0.5f+0.5f*vec3(1.0f)*float(stepCount)/100;
    //return vec3(stepCount/50.0f, 1.0f-stepCount/50.0f, 0.0f);
}

float CANVAS_DISTANCE = 0.5;
vec3 WORLD_UP = vec3(0.0f, 0.0f, 1.0f);
Ray createRay() {
    vec2 uv = (vec2(gl_GlobalInvocationID.xy) / vec2(imageSize(outputImage))*2-1)*ubo.FOVScaling;
    uv.x *= ubo.aspectRatio;
	vec3 uvRight = normalize(cross(ubo.viewDirection, WORLD_UP));
	vec3 uvDown = normalize(cross(ubo.viewDirection, uvRight));
	vec3 toCanvas = ubo.viewDirection * CANVAS_DISTANCE;
	vec2 canvasSize = imageSize(outputImage);
	vec3 rayPosition = ubo.position + toCanvas + (uvRight * uv.x) + (uvDown * uv.y);
	vec3 rayDirection = normalize(rayPosition - ubo.position);

    return Ray(rayPosition, rayDirection);
}

void main() {
    Ray ray = createRay();

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(marchRay(ray), 1.0f));
    //imageStore(outputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(ubo.aspectRatio/2.0f));
    //imageStore(outputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4((gl_GlobalInvocationID.x/16)/15.0f, (gl_GlobalInvocationID.y/16)/15.0f, (gl_GlobalInvocationID.x % 16)/15.0f, 1.0f));
    //imageStore(outputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(gl_GlobalInvocationID.x/15.0f, gl_GlobalInvocationID.y/15.0f, 0.0f, 1.0f));
}